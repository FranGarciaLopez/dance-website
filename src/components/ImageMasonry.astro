---
import "photoswipe/dist/photoswipe.css";

interface Props {
  images: string[];
}
const { images } = Astro.props;

const CLOUD_NAME = "dgvvnopu7";

function cldUrl(publicId: string, width?: number, height?: number) {
  const w = width ? `w_${width},` : "";
  const h = height ? `h_${height},` : "";
  return `https://res.cloudinary.com/${CLOUD_NAME}/image/upload/${w}${h}c_limit,q_auto,f_auto/${publicId}.jpg`;
}
---

<section class="masonry-section px-4 py-12 max-w-5xl mx-auto" id="galeria">
  <h2 class="text-2xl md:text-3xl lg:text-5xl font-bold text-center mb-8">
    Galería de Imágenes - The Latin Action
  </h2>

  <div class="masonry-grid mx-auto" id="pswp-gallery">
    {
      images.slice(0, 7).map((publicId) => (
        <a
          href={cldUrl(publicId)}
          class="masonry-item block"
          data-pswp-width="0"
          data-pswp-height="0"
          data-cropped="false"
        >
          <div class="aspect-box">
            <img
              src={cldUrl(publicId, 600)}
              alt={publicId.replace(/[_-]/g, " ")}
              class="w-full h-full object-cover rounded-lg cursor-pointer hover:opacity-90 transition"
              loading="lazy"
            />
          </div>
        </a>
      ))
    }
  </div>
</section>

<!-- PhotoSwipe template -->
<div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="pswp__bg"></div>
  <div class="pswp__scroll-wrap">
    <div class="pswp__container">
      <div class="pswp__item"></div>
      <div class="pswp__item"></div>
      <div class="pswp__item"></div>
    </div>
    <div class="pswp__ui pswp__ui--hidden">
      <div class="pswp__top-bar">
        <div class="pswp__counter"></div>
        <button class="pswp__button pswp__button--close" title="Cerrar (Esc)"
        ></button>
        <button class="pswp__button pswp__button--zoom" title="Zoom in/out"
        ></button>
        <div class="pswp__preloader">
          <div class="pswp__preloader__icn">
            <div class="pswp__preloader__cut">
              <div class="pswp__preloader__donut"></div>
            </div>
          </div>
        </div>
      </div>
      <div class="pswp__caption">
        <div class="pswp__caption__center"></div>
      </div>
    </div>
  </div>
</div>

<script type="module" is:inline>
  import PhotoSwipeLightbox from "https://cdn.jsdelivr.net/npm/photoswipe@5.3.9/dist/photoswipe-lightbox.esm.min.js";

  const lightbox = new PhotoSwipeLightbox({
    gallery: "#pswp-gallery",
    children: "a",
    pswpModule: () =>
      import(
        "https://cdn.jsdelivr.net/npm/photoswipe@5.3.9/dist/photoswipe.esm.min.js"
      ),
    showHideAnimationType: "fade",
    arrowKeys: true,
    clickToCloseNonZoomable: true,
    wheelToZoom: true,
    maxSpreadZoom: 2,
  });

  lightbox.on("gettingData", (e) => {
    if (!e.element || !e.data) return;

    // Get dimensions and orientation
    const width = parseInt(e.element.dataset.pswpWidth || "0");
    const height = parseInt(e.element.dataset.pswpHeight || "0");
    const orientation = e.element.dataset.orientation;

    // Ensure dimensions are set properly
    if (width && height) {
      e.data.width = width;
      e.data.height = height;

      // Calculate proper dimensions based on viewport and image orientation
      const viewportWidth = window.innerWidth * 0.8;
      const viewportHeight = window.innerHeight * 0.8;

      // Set the appropriate size based on orientation
      if (orientation === "portrait") {
        // Portrait: Maintain height, adjust width
        const ratio = height / width;
        const targetHeight = Math.min(height, viewportHeight);
        e.data.width = targetHeight / ratio;
        e.data.height = targetHeight;
      } else {
        // Landscape: Maintain width, adjust height
        const ratio = width / height;
        const targetWidth = Math.min(width, viewportWidth);
        e.data.width = targetWidth;
        e.data.height = targetWidth / ratio;
      }
    }
  });

  // Add custom positioning for images
  lightbox.on("contentLoad", (e) => {
    if (e.content && e.content.element) {
      const img = e.content.element.querySelector("img");
      if (img) {
        const orientation = e.content.data.element.dataset.orientation;

        // Add orientation class to help with CSS positioning
        if (orientation) {
          img.classList.add(`pswp-${orientation}`);
        }
      }
    }
  });

  lightbox.init();
</script>

<style>
  .masonry-grid {
    column-count: 1;
    column-gap: 1rem;
  }
  @media (min-width: 768px) {
    .masonry-grid {
      column-count: 2;
    }
  }
  @media (min-width: 1024px) {
    .masonry-grid {
      column-count: 3;
    }
  }
  .masonry-item {
    margin-bottom: 1rem;
    break-inside: avoid;
    display: block;
  }

  /* PhotoSwipe image orientation styles */
  :global(.pswp__zoom-wrap) {
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    width: 100% !important;
    height: 100% !important;
  }

  :global(.pswp__img) {
    max-height: 90vh !important;
    max-width: 90vw !important;
    object-fit: contain !important;
    position: relative !important;
    margin: 0 auto !important;
    top: 0 !important;
    left: 0 !important;
    transform: none !important;
  }

  :global(.pswp-portrait) {
    max-height: 85vh !important;
    width: auto !important;
  }

  :global(.pswp-landscape) {
    max-width: 85vw !important;
    height: auto !important;
  }
</style>
